from typing import List


class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        memo = {}
        for i, row in enumerate(board):
            for j, column in enumerate(row):
                if column != ".":
                    block = ((j // 3) * 3) + (i // 3)
                    cur = (i, j, block)
                    if column in memo:
                        for val in memo[column]:
                            for iter, n in enumerate(cur):
                                if val[iter] == n:
                                    return False
                        memo[column].append(cur)
                    else:
                        memo[column] = [cur]
        return True

board = [["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]


board = [["8", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8",
                                                                                                                                                                                                      ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]]

s = Solution()
print(s.isValidSudoku(board))
